
자바의 특징

1. 이식성이 높은 언어이다(리눅스, 유닉스 등에도 JRE(Java Runtime Environment)가 설치되어 있는 모든 운영체제에서 실행 가능하다.)
2. 객체지향  언어이다.(OOP: Object Oriented Programming)
3. 함수적 스타일 코딩을 지원한다.(람다식(Lamda Expressions))
4. 메모리를 자동으로 관리한다.(C++과 같이 수동식 메모리 관리하는 언어와 달리, 자바는 Garbage Collector를 실행시켜 자동으로 사용하지 않는 객체를 삭제시킨다.
5. 다양한 애플리케이션을 개발할 수 있다.
(Java SE(Standard Edition): 클라이언트와 서버와 관계없이 프로그램을 개발(JDK: Java Development Kit)
(Java EE(Enterprise Edition): 분산환경(네트워크, 인터넷)에서 서버용 애플리케이션을 개발하기 위한 도구 및 라이브러리 API를 정의. 
   ㄴ 웹 어플리케이션(Servlet/JSP), 분산처리 컴포넌트(EJB(Enterprise Java Bean)), XML 웹 서비스 등


자바 가상기계(JVM: Java Virtual Machine)이란?
: 운영체제는 자바 프로그램을 바로 실행할 수 없다. 이는 자바 프로그램은 완전한 기계어가 아닌, 중간 단계의 바이트 코드이기 때문이다.(해석, 실행이 필요)
이를 수행하는 기능이 자바 가상기계이고, JVM은 운영체제와 자바 프로그램을 중계하는 기능을 한다고 볼 수 있다.

- 바이트 코드는 모든 JVM에서 동일한 실행 결과를 보장하지만, JVM은 운영체제에 종속적이다.
- 소스파일(자바로 작성된 파일, .java)
- 컴파일러(javac.exe)로 컴파일한 파일(바이트코드 파일, .class)
- 바이트 코드 파일을 JVM 구동 명령어(java.exe)에 의해 JVM에서 해석되고, 해당 운영체제에 맞춰 기계어로 번역된다.
    ㄴ 자바의 장점(Write once, Run anywhere) : 바이트코드는 하나지만, 번역되는 기계어는 여러 개

Java SE의 구현체 : JDK, DRE라는 두가지 버전이 있다.
- JDK : JRE(JVM + 라이브러리 API) + 컴파일러
- JRE : JVM + 라이브러리 API


Java JDK 설치 과정
1. JDK 다운 및 설치
2. 환경변수 JAVA_HOME 생성 및 Path에 bin 파일 등록( ex) %JAVA_HOME%\bin; )
3. cmd에 javac -version으로 확인


API 도큐먼트란?
: JAVA 개발에 있어 JDK에서 제공하는 표준 클래스 라이브러리를 반드시 사용해야 한다.
이 클래스는 API(Application Programming Interface)라고도 하는데, JDK에 포함되어 있는 API들은 매우 방대하기 때문에
쉽게 찾을 수 있도록 API 도큐먼트를 제공한다.
ex) http://docs.oracle.com/javase/8/docs/api


자바 프로그램 개발 순서
- 소스 작성 -> 실행
java 소스파일 생성 -> 컴파일러(javac)로 바이트코드 생성 -> JVM 구동 명령어(java)로 실행


클래스 : 필드 또는 메소드를 포함하는 블록
메소드 : 어떤 일을 처리하는 실행문들을 모아 놓은 블록

JAVA의 주석
// : 라인 끝까지 주석
/* ~ */ : 범위를 주석


실행문 작성 시 주의사항
: 컴파일러는 세미콜론이 나올 때까지 실행문이 계속해서 연결된 것으로 보기 때문이다.
ex) int result = 
10 + 1;
System.out.println(result);


퍼스펙티브와 뷰
- 퍼스펙티브(Perspective) : 이클립스에서 프로젝트를 개발할 때, 유용하게 사용하는 뷰들을 묶어 놓은 것을 말한다.

프로젝트 생성
: Project Layout 에는 자바 소스파일과 컴파일된 바이트 코드 파일을 분리 저장하도록 설정되어있다.
자바 소스파일(~.java)은 src 디렉토리에,
바이트 코드파일은 bin 디렉토리에 기본적으로 저장된다.


소스파일 생성과 컴파일
- package란? : 클래스를 포함하는 그룹명

