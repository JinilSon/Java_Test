Contructor based Injection(생성자)
1. 생성자로 초기화 하기 전까지는 참조변수에 null값이 들어있지 않기 때문에, NullPointerException이 발생하지 않는다.
2. 의존관계 주입을 하지 않는 경우에는 객체를 생성할 수 없기 때문에, 의존관계에 대한 내용을 노출시킴으로써 런타임에러가 아닌 컴파일 에러로의 유도가 가능하다
     이와 마찬가지로 의존관계에 대한 명확성이 순환참조(끝없는 참조)을 확인할 수 있는 환경을 만들어주어 안정성이 높다.
     Test단 : Service service1 = new Service(new Dao());
               Service service2 = new Service();			// 컴파일 에러 발생가능(매개변수가 없는 생성자는 존재하지 않음)



 ** JAVA의 특징으로는 모든 클래스는 하나 이상의 생성자가 존재해야 한다는 점에 있다.
   만약 클래스에 생성자를 선언하지 않았다면, default 생성자를 내부적으로 자동 선언 및 사용을 할 것이다.
   만약 클래스에 생성자를 선언했다면, default 생성자를 선언되지 않으며, 해당 명시된 생성자를 사용한다.


     

3. 위의 두 조건으로 인하여, 반드시 초기화가 되어야 함으로 final을 사용할 수 있다.
	*final : 생명주기에서 한 번만 저장을 허락하는 특성(보통은 선언초기화를 하지만 선언 후 생성자를 통한 초기화도 가능)


Setter based Injection(Setter)
Field based Injection(Field)
: Setter와 Field Injection은 거의 비슷한 구조의 방식으로, 받아온 객체를 setter를 거쳐서 넣는 방법과 변수에 바로 등록해주는 방식이다.
생성자 방식에 비해 가볍고, 간단하다는 장점이 있다.

  Test단 : Service service = new Service();
	 service.setDao(new Dao());		// Test단에서는 서비스 객체에 어떤 Dao를 넣든 컴파일러는 관심이 없다.

 ** 매개변수인 Dao의 주입을 확인해야만 객체를 생성해주는 생성자의 특성과 달리
   setter는 매개변수의 주입 전, 객체의 생성을 먼저 실시하기 때문에
   할당된 객체에 있는 멤버 변수들은 초기화를 실시하기 전까지 null 상태에 놓이게 된다.

  (쉽게 비유하자면, 햄버거에 비유할 수 있다.
  햄버거라는 음식의 최소 조건은 빵이라는 객체 사이에 햄이라는 객체가 들어가 있는 것을 의미한다.
  이를 생성자 방식을 채용했을 때 제조과정은,
  햄버거를 만들 때, 햄버거에 햄을 넣음으로써 햄버거라 불리게 하는 것이다.
  반대로 setter 방식을 채용했을 때 제조과정은,
  우선 빵 2개만 있는 햄버거의 틀을 가진 것을 햄버거라 부른다.
  그리고 이후에 햄버거에 햄을 끼움으로써 완성한다.

  생성자 방식은 햄이 없으면 햄버거라 부르는 객체도 생성되지 않는다.
  하지만 setter 방식은 빵 2개만 있어도 햄버거라 부르기에, 햄이 끼워지지않은 햄버거는 이미 존재하는 상태
  그러므로 멤버 변수(햄)의 값은 null로 초기화되어 있다.
  이 상태에서 햄의 값을 물어보는 메소드는 실행이 가능하기에, NullPointException이 발생할 우려가 있다.



생성자, setter, field :  https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad/
final 참조 :  https://sabarada.tistory.com/148
상속된 변수의 초기화 :  https://seeminglyjs.tistory.com/226